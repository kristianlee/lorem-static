AWSTemplateFormatVersion: '2010-09-09'
Description: Setting up a static site using an S3 Bucket with Cloudfront

Parameters:
  DomainName:
    Type: String
    Description: this is the domain name you'd like the website to be available on, e.g. example.com
    Default: example.com
    
  DNSZoneID: 
    Type: String
    Description: this can be found in the AWS Route 53 console for the DNS Hosted Zone you intend to use, e.g. Z8VLZEXAMPLE
    Default: Z8VLZEXAMPLE
  
  CertificateARN:
    Type: String
    Description: the AWS Resource Name of the Amazon Certificate Manager SSL Certificate generated in advance, e.g. arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012
    Default: arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012
  
  LogsLifecycle:
    Type: String
    Description: choose whether you'd like a lifecycle rule applied to the access logs created in the S3 Bucket
    AllowedValues: ['true', 'false']
    Default: 'true'
  
  ApexDomain:
    Type: String
    Description: choose whether your domain name is an apex one, i.e. example.com (apex) vs site.example.com (non-apex)
    AllowedValues: ['true', 'false']
    Default: 'true'
  
  AutoS3Deploy:
    Type: String
    Description: choose whether you will take advantage of the automated S3 deployment (see README)
    AllowedValues: ['true', 'false']
    Default: 'false'
  
  S3DeployUserARN:
    Type: String
    Description: the AWS Resource Name of the IAM user to be used to automatically deploy to S3 from Github Actions
    Default: 'arn:aws:iam::123456789101:user/s3.user'
  
  AdminAccountARN:
    Type: String
    Description: the AWS resource Name of the account used to administer the service (for S3 bucket access)
    Default: 'arn:aws:iam::123456789101:user/s3.admin.user'

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Required Parameters"
        Parameters:
          - AdminAccountARN
          - ApexDomain
          - CertificateARN
          - DomainName
          - DNSZoneID
      - 
        Label: 
          default: "Optional / Automation Parameters"
        Parameters: 
          - AutoS3Deploy
          - LogsLifecycle
          - S3DeployUserARN

Conditions:
  LogRotation: !Equals
    - !Ref LogsLifecycle
    - 'true'
  ApexDomain: !Equals
    - !Ref ApexDomain
    - 'true'
  AutoS3Deploy: !Equals
    - !Ref AutoS3Deploy
    - 'true'
    

Resources:
  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: OAI for static site

  RootBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join 
      - '-'
      - - !Ref 'AWS::StackName'
        - !Ref DomainName
        - root
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: 's3_root/'
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'error.html'
      Tags:
        - Key: Project
          Value: lorem-static 

  RootBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RootBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: OAIPolicyListBucket
            Effect: 'Allow'
            Action: 's3:ListBucket'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub '${RootBucket.Arn}'
          - Sid: OAIPolicyGetBucket
            Effect: 'Allow'
            Action: 's3:GetObject'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub '${RootBucket.Arn}/*'
          - !If 
            - AutoS3Deploy 
            - Sid: AllowS3AutoDeploy
              Effect: 'Allow'
              Action: 
                - 's3:Put*'
                - 's3:Delete*'
                - 's3:List*'
              Principal:
                AWS:
                  !Ref S3DeployUserARN
              Resource: !Sub '${RootBucket.Arn}/*'
            - !Ref 'AWS::NoValue'
          - !If 
            - AutoS3Deploy 
            - Sid: AllowS3AutoDeployList
              Effect: 'Allow'
              Action: 
                - 's3:ListBucket'
              Principal:
                AWS:
                  !Ref S3DeployUserARN
              Resource: !Sub '${RootBucket.Arn}'
            - !Ref 'AWS::NoValue'

  FailoverBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join 
      - '-'
      - - !Ref 'AWS::StackName'
        - !Ref DomainName
        - failover
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: 's3_failover/'
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'error.html'
      Tags:
        - Key: Project
          Value: lorem-static 

  FailoverBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FailoverBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: OAIPolicyListBucket
            Effect: 'Allow'
            Action: 's3:ListBucket'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub '${FailoverBucket.Arn}'
          - Sid: OAIPolicyGetBucket
            Effect: 'Allow'
            Action: 's3:GetObject'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub '${FailoverBucket.Arn}/*'
          - !If 
            - AutoS3Deploy 
            - Sid: AllowS3AutoDeploy
              Effect: 'Allow'
              Action: 
                - 's3:Put*'
                - 's3:Delete*'
                - 's3:List*'
              Principal:
                AWS:
                  !Ref S3DeployUserARN
              Resource: !Sub '${FailoverBucket.Arn}/*'
            - !Ref 'AWS::NoValue'
          - !If 
            - AutoS3Deploy 
            - Sid: AllowS3AutoDeployList
              Effect: 'Allow'
              Action: 
                - 's3:ListBucket'
              Principal:
                AWS:
                  !Ref S3DeployUserARN
              Resource: !Sub '${FailoverBucket.Arn}'
            - !Ref 'AWS::NoValue'

  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: LogDeliveryWrite
      LifecycleConfiguration:
        Rules:
          - Id: remove logs after 1 day
            ExpirationInDays: 1
            Status: !If
            - LogRotation
            - Enabled
            - Disabled
      BucketName: !Join 
      - '-'
      - - !Ref 'AWS::StackName'
        - !Ref DomainName
        - logs
      Tags:
        - Key: Project
          Value: lorem-static 
  
  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 's3:*'
            Principal:
              AWS:
                - !Ref AdminAccountARN
            Resource: !Sub '${LoggingBucket.Arn}/*'
  
  Cloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
          - !Sub 'www.${DomainName}'
        CustomErrorResponses:
          - ErrorCode: 404
            ErrorCachingMinTTL: 30
            ResponsePagePath: '/error.html'
            ResponseCode: 404
        Origins:
          - Id: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref DomainName
              - root
            DomainName: !GetAtt RootBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          - Id: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref DomainName
              - failover
            DomainName: !GetAtt FailoverBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        OriginGroups:
          Quantity: 1 
          Items:
            - Id: !Join 
                - '-'
                - - !Ref 'AWS::StackName'
                  - !Ref DomainName
                  - origingroup
              FailoverCriteria: 
                StatusCodes:
                  Items:
                    - 404
                  Quantity: 1
              Members:
                Quantity: 2
                Items:
                  - OriginId: !Join 
                    - '-'
                    - - !Ref 'AWS::StackName'
                      - !Ref DomainName
                      - root
                  - OriginId: !Join 
                    - '-'
                    - - !Ref 'AWS::StackName'
                      - !Ref DomainName
                      - failover
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: 'http2'
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          Compress: true
          TargetOriginId: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - !Ref DomainName
              - origingroup
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          MinimumProtocolVersion: TLSv1.2_2018
          AcmCertificateArn: !Ref CertificateARN
          SslSupportMethod: sni-only
        Logging:
          Bucket: !GetAtt LoggingBucket.DomainName
          IncludeCookies: false
          Prefix: 'cdn/'
      Tags:
        - Key: Project
          Value: lorem-static 

  DNSNames:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref DNSZoneID
      RecordSets:
      - Name: !Sub '${DomainName}.'
        Type: A
        AliasTarget:
          DNSName: !GetAtt Cloudfront.DomainName
          EvaluateTargetHealth: false
          HostedZoneId: Z2FDTNDATAQYW2
      - !If
        - ApexDomain
        - Name: !Sub 'www.${DomainName}'
          Type: A
          AliasTarget:
            DNSName: !GetAtt Cloudfront.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2
        - !Ref AWS::NoValue

  
Outputs:
  Website:
    Value: !Ref DomainName
    Description: domain name of website